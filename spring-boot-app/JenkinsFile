pipeline {
    agent any  

    environment {
        SONAR_URL = "http://44.200.195.14:9000"
        GIT_REPO_NAME = "cicd-pipeline"
        GIT_USER_NAME = "Rineeth-R"
        DOCKER_IMAGE = "rineeth05/ultimate-cicd:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    sh 'echo "✅ Code checked out successfully!"'
                }
            }
        }

        stage('Build and Test') {  
            steps {
                script {
                    sh 'ls -ltr'  // Check directory structure
                    sh '''
                        if [ -d "spring-boot-app" ]; then
                            cd spring-boot-app && mvn clean package
                        else
                            echo "❌ Error: spring-boot-app directory not found!" && exit 1
                        fi
                    '''
                }
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://44.200.195.14:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    script {
                        sh '''
                            if [ -d "spring-boot-app" ]; then
                                cd spring-boot-app
                                mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                            else
                                echo "❌ Error: spring-boot-app directory not found!" && exit 1
                            fi
                        '''
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh '''
                        if [ -d "spring-boot-app" ]; then
                            cd spring-boot-app
                            docker build -t ${DOCKER_IMAGE} .
                        else
                            echo "❌ Error: spring-boot-app directory not found!" && exit 1
                        fi
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {
                        sh '''
                            git config --global user.email "rineeth.raja05@gmail.com"
                            git config --global user.name "Rineeth-R"

                            if [ -f "spring-boot-app-manifests/deployment.yml" ]; then
                                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                                git add spring-boot-app-manifests/deplo
